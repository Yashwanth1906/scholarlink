

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  studentdetails StudentDetails[]
  secondarystudentDetails SecondaryStudentDetails[]
  hscstudentdetails HSCStudentDetails[]
  ugcollegestudentdetails UGCollegeStudentDetails[]
  pgcollegestudentdetails  PGCollegeStudentDetails[]
  appliedscholarships ScholarshipApplied[]
  blogs Blogs[]
}


model StudentDetails{
  id Int @id @default(autoincrement())
  studemail String
  fatherName String?
  motherName String?
  fatherOccupation String?
  motherOccupation String?
  gaurdianName String?
  gaurdianOccupation String?
  parentContactNo String
  student Student @relation(fields: [studemail],references: [email],onDelete: Cascade)
  currentQualifications String
  gender String
  contactNo String
  annualIncome Int?
  dob String
  firstGraduate String?
  aadharCard String?
  rationCard String?
  bonafide String?
  incomecertificate String?
  salaryslip String?
  achievements String[] @default([])
  community String
}


model SecondaryStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  schoolname String
  schoollocation String
  score Float
  annualcard String?
  grade Int
}
model HSCStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  sscschoolname String
  sscschoollocation String
  schoolname String
  schoollocation String
  sscgrade Float
  sscmarksheet String?
}


model UGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  sscschoolname String
  sscschoollocation String
  hscschoolname String
  hscschoollocation String
  collegename String
  collegelocation String
  sscgrade Float
  sscmarksheet String?
  hscgrade Float
  hscmarksheet String?
  gpa Float
  styear Int
  endyear Int
}


model PGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  sscschoolname String
  sscschoollocation String
  hscschoolname String
  hscschoollocation String
  ugcollegename String
  ugcollegelocation String
  collegename String
  collegelocation String
  sscgrade Float
  sscmarksheet String?
  hscgrade Float
  hscmarksheet String?
  ugcgpa Float
  ugdegreecertificate String?
  styear Int
  endyear Int
}


model Admin{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  orgname String
  adminDetails AdminDetails[]
  scholarship Scholarship[]
}

model AdminDetails{
  id Int @id @default(autoincrement())
  adminemail String
  admin Admin @relation(fields: [adminemail],references: [email],onDelete: Cascade)
  orglocation String
  contactno String
  yearsofservice Int?
  certificate String
  description String
}

model Scholarship{
  id Int @id @default(autoincrement())
  name String
  providedby String
  image String?
  admin Admin @relation(fields: [providedby],references: [email],onDelete: Cascade)
  scholarshipfor String[]
  likes Int
  amt Int
  period Int
  regstdate String
  regenddate String
  description String
  procedures String[]
  appliedScholarship ScholarshipApplied[]
  blogs Blogs[]
  completed Boolean @default(false)
}


model ScholarshipApplied{
  id Int @id @default(autoincrement())
  scholarshipid Int
  studentid String
  scholarshipEssay String?
  status String
  scholarship Scholarship @relation(fields: [scholarshipid],references: [id],onDelete: Cascade)
  student Student @relation(fields: [studentid],references: [email],onDelete: Cascade)
}

model Blogs{
  id Int @id @default(autoincrement())
  scholarshipId Int
  scholarship Scholarship @relation(fields: [scholarshipId],references: [id])
  studentId Int
  student Student @relation(fields: [studentId],references: [id])
  title String
  shortDesc String
  subtitle String[]
  content String[]
}



// ["female","any","enginerr","any"]

// enum For{
//   SecondaryStudent
//   HSCStudent
//   UGStudent
//   PGStudent

// }



// eligbility : gender , community , education , income , 